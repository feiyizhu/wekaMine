#!/usr/bin/env groovy

import durbin.weka.* 
import durbin.util.*

import weka.classifiers.meta.FilteredClassifier;
import weka.filters.unsupervised.attribute.RemoveType;
import weka.core.SerializationHelper;
import weka.filters.supervised.attribute.*
import weka.filters.*
import weka.attributeSelection.*

WekaAdditions.enable() // Enable meta-class additions to weka API

err = System.err // sugar

// Get the command line options, print help if needed. 
options = ParseOptions(args)

// Expand the configuration file or wekaMine results into a list of experiments.
def experiments = [] 
if (options.config){
	experiments = new WekaMineConfig(options.config)
	params = experiments.params
}else if (options.resultsFile){
	wmr = new WekaMineResults(options.resultsFile)
			
	if (options.topModel){	
		err.print "Determining top model..."
		// Find the top result...
		maxStat = -999;
		maxIdx = -1;
		for(int i = 0;i < wmr.size();i++){
				if (wmr[i].roc > maxStat){
					maxStat = wmr[i].roc
					maxIdx = i
				}
		}
		err.println "done."
		// Create an experiment from it...
		topExperiment = wmr[maxIdx].toExperiment()
		err.println "Top Model: "+topExperiment
		experiments = []
		experiments << topExperiment
	}else{
		experiments = wmr.toExperiments()
	}
	params = [:]	
}else if (options.experimentString){
	headingMap = WekaMineResult.defaultHeadingMap()
	experiment = new ExperimentSpec(options.experimentString,headingMap)
	experiments << experiment
	params = [:]
}else{
	System.err.println "How did we get here?  Must specify one of -c, -R, or -E to define the model. Run with -h for options. "
	System.exit(1)
}

err.println "${experiments.size()} experiments read."

// Write out jobs and quit if that is requested...
if (options.experimentsPerJob){
	scriptFile = getClass().protectionDomain.codeSource.location.path	
	WekaMine.writeClusterJobList(args,experiments.size(),options.experimentsPerJob,scriptFile)
	System.exit(0)
}

FoldSets holdout;
if (options.holdoutFile){
	err.print "Reading holdout ${options.holdoutFile}..."
	holdout = new FoldSets(options.holdoutFile)	
	err.println " ${holdout.size()} holdouts read."
}


// Read the data (expression, CNV, whatever) and the clinical from tab delimited files
rawdata = WekaMine.readNumericFromTable(options.data)
clinical = WekaMine.readFromTable(options.clinical)
def data

experiments.each{e->
	err.println "Experiment class: ${e.classAttribute}"		
}
err.println "clinical attributes: "+clinical.attributeNames()


// Perform each experiment described in the experiment spec...
experiments[options.experimentRange].eachWithIndex{exp,idx-> 
	jobIdx = idx+options.experimentRange.getTo()
	err.println "=================================="
	err.println "Experiment: $jobIdx"
	try{
		
		// Creates a wekaMine pipeline...
		pipeline = new WekaMine(rawdata,clinical,exp,params)			
		
		err.println "CHECK1"
		
		if (options.holdoutSet){			
			err.print "Removing ${options.holdoutSet[exp.classAttribute]?.size()} holdout samples for ${exp.classAttribute}..."
			
			if (options.holdoutSet.keySet().contains(exp.classAttribute)){			
				data = WekaMine.removeInstances(rawdata,options.holdoutSet[exp.classAttribute])
			}else{
				msg = "Holdout set doesn't contain expected attribute: ${exp.classAttribute}"
				msg += "\nHoldout contains keys: ${options.holdoutSet.keySet()}"
				throw new Exception(msg)
			}
			err.println "done."
		}else{
			data = rawdata  
		}		
		
		err.println "CHECK2"
		
		// Apply unsupervised filter
		instances = pipeline.applyUnsupervisedFilter(data)	
								
		// Combines data and single class attribute from clinical into one set of instances...
		// KJD: apparently, the order is not guaranteed to match between instances and data...
		// I don't depend on the order, but it's something to keep in mind...
		instances = pipeline.createInstancesFromDataAndClinical(instances,clinical,exp.classAttribute)	

		// Clean up instances:
		// * remove useless attributes
		// * if not allowed, remove instances with negative class values
		// * remove instances with missing class values	
		instances = pipeline.cleanUpInstances(instances)

		// Discretize the class attribute...
		(instances,cutoffs) = pipeline.discretizeClassAttribute(instances)
				
		err.println "cutoffs: $cutoffs"		
				
		// Remove ID attribute, since attribute evaluators and classifiers choke on it...
		instances = pipeline.removeInstanceID(instances)
		
		// Apply the attribute selection algorithm to instances...			
		instances = pipeline.selectAttributes(instances)	
											
		err.print("Build classifier ${exp.classifierStr}...")
			model = new WekaMineModel(instances,exp.classifier,cutoffs,exp.filter)
		//exp.classifier.buildClassifier(instances);		
		err.println("done.")				

		// Create an object to hold all the info we need to classify new instances with 
		// this model...	
		//model = new WekaMineModel(instances,exp.classifier,cutoffs)
		//model = new WekaMineModel(instances,exp.classifier,cutoffs,exp.filter)

		// If we have a nullModelFile, read it in and process the instances, otherwise use 
		// instances. 
		def nullData
		if (options.nullModelFile){
			nullData = pipeline.readNumericFromTable(options.nullModelFile)
			nullData = pipeline.cleanUpInstances(nullData)
			nullData = pipeline.removeInstanceID(nullData)
			nullData = pipeline.selectAttributes(nullData)
			// Generate null model without permuting anything...
			if (!options.nullModelSamples){
				model.computeBootstrapNullModel(nullData)
			}			
		}else{
			err.println "Null permutation size: "+instances.numInstances()+" instances x "+instances.numAttributes()+" attributes."
			nullData = instances
		}

		// Create and save a bootstrap null model if requested...
		if (options.nullModelSamples){					
			err.println "Computing null model with ${options.nullModelSamples} bootstrap samples."
			err.println "Note: This can take awhile. Also note that the null model will expand the size of the saved model."
			samples = options.nullModelSamples as int
			iterations = (double)samples/((double)nullData.numInstances())
			iterations = Math.ceil(iterations)
			err.println "This will require $iterations passes through permuted instances."
			model.computeBootstrapNullModel(nullData,iterations)
			err.println "done."
		}		

		// Write out the model file...
		def rootName = options.modelFileName
		def cleanClass = exp.classAttribute.replaceAll(" ","_")
		if (options.useClassName) {
			rootName = "$rootName"+cleanClass
			outFile = "${rootName}.wmm"
		}else{
			outFile = "${rootName}_${jobIdx}.wmm"
		}
		
		
		// Before we save the model, see what we can do to save space
		cleanupModel()
				
		
		err.print "Save model to $outFile ..."
		SerializationHelper.write(outFile,model)
		err.println "done."
		
		// Encourage garbage collection maybe...
		instances = null;
		samples = null;
		model = null;
			
	}catch (Exception e){
		err.println e
	}
}

/***
*	Weka Logistic regression (class LogisticBase) saves a copy of the training data
*   This isn't needed for classification so we can safely remove it. 
*   Similarly, the Kernel, (class CachedKernel) saves a copy of the training data. 
*   Nonlinear kernels need this to build the kernel matrix, but linear kernels do not. 
*   So we remove it from linear kernels.   
*  
*   Given the space cost of nonlinear SMO kernels, I should require a minimum 
*   performance gain in order to use it over a more space efficient model. 
* 
*/ 
def cleanupModel(model){
	def classifier = model.classifier
	def baseClassifier
	if (classifier instanceof weka.classifiers.meta.FilteredClassifier){
		baseClassifier = classifier.getClassifier()
		if (baseClassifier instanceof durbin.weka.AttributeSelectedClassifier2){
			baseClassifier = baseClassifier.getClassifier()
		}						
	}else if (classifier instanceof durbin.weka.AttributeSelectedClassifier2){
		baseClassifier = classifier.getClassifier()
	}else{	
		baseClassifier = classifier
	}
	
	switch(baseClassifier){
		case {it instanceof weka.classifiers.functions.SimpleLogistic}:
			baseClassifier.m_boostedModel.cleanup()
		break;
		
		case {it instanceof weka.classifiers.functions.SMO}:
		if (baseClassifier.m_KernelIsLinear){
			// KJD Breaks if nonbinary				
			def c = baseClassifier.m_classifiers[0][1]
			c.m_kernel.m_data=null
		}
		break;
	}	
}


//============================================================================
// 

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''
	wekaMineSaveModel takes a tab delimited data file in attributes (rows) x samples (cols) format, 
	and a clinical file, also in attributes (rows) x samples (cols) format, and trains 
	a classifier either on the classifier(s) specified in the config file or the classifiers 
	specified in a wekaMine results summary .tab file.  The resulting model(s) are written to 
	a binary output file for later use. Note: attributes reported after filtering include 
	class attribute.  Optionally, a null model may be generated by permuting the attribute values 
	and classifying the permuted set.  This null model will be saved in the .wmm file.  
	
	Documentation for the config file can be found here:  

	https://github.com/jdurbin/wekaMine/wiki/Wekamine-config

	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:

	wmSaveModel  -d lin2008.tab -i lin2008.clinical.tab -c cfg.txt -o lin2008.wekaMine.wmm

	''');

	parser.with{

	  required 'o','modelFileName',[description: 'Root file name where output should go.']
	  required 'd','data', [description: 'Data file in attribute (row) by samples (col) format.']
	  required 'i','clinical', [description: 'Clinical file in attribute (row) by samples (col) format.']

	  optional 'c','config',[description: 'Configuration file']  
		optional 'R','resultsFile',[description: 'Use given wekaMine summary results to build classifier(s). Will save one model per result in file.']

		optional 'B','nullModelSamples',[description: 'Compute bootstrap null model (label permutations) and save that in model file. Option specifies how many points to compute.']		
		optional 'n','nullBackgroundFile',[description: 'A data file in row x samples format that will be used to generate a background null model. If combined with -B, these samples will be permuted also.']
		optional 'S','holdoutSet',[default:null,description: "File listing samples not to use.  All other samples will be included in training model.",
			validate:{
				if (it != null){				
					// Read in the samplesToOmit... 
					samplesToOmitByClassAttribute = [:]
					new File(it).splitEachLine("\t"){fields->
						classAttr = fields[0]
						samplesToOmit = fields[1..-1]
						samplesToOmitByClassAttribute[classAttr] = samplesToOmit
					}
					return(samplesToOmitByClassAttribute)
				}else {
						return(it)							
				}
			}
		]
		
		
		flag 'T','topModel',[default: false,description: 'With -R option, will output a model corresponding to the best result in the results file.']
		
		optional 'E','experimentString',[description: 'A single experiment string. In single quotes, comma separated: attrEval,attrSearch,numAttributes,classifier.  Use keyword "none" to omit a field.']
	  optional 'r','experimentRange',[default: "0,-1", description: 'Range of experiments to run (e.g. -r 54,67, mainly for cluster splits)',
			// Convert it to a proper range. Default is all inclusive range. 
			validate:{								
		 		experimentStart = (it.split(","))[0] as int
		 		experimentEnd = (it.split(","))[1] as int 
			  range = (experimentStart..experimentEnd)
				return(range)
			}]			

		optional 'k','experimentsPerJob',[description: 'When specified as last option, wmSaveModel does not run but instead outputs a list of wmSaveModel commands, k experiments each, for the cluster.']

		
	  flag 'N','useClassName',[default:false,description: 'Tack on class name as part of modelFileName.']
	  flag 'h','help',[default:false,description: 'Print script help.']
	}

	def options
	try{
	  options = parser.parse(args)
	
		if ((!options.config && !options.resultsFile && !options.experimentString) || (options.help)){
			System.err.println "Must specify one of -c, -R, or -E to define the model. Run with -h for options. "
			System.err<<parser.usage
			System.exit(1)
		}
		
		if (options.topModel && (!options.resultsFile)){
			System.err.println "-T topModel option must be used with -R resultsFile option. "
			System.err<<parser.usage
			System.exit(1)
		}
		
	
	}catch(Exception e){
	  System.err << parser.usage
	  System.exit(1)
	}	
	
	return(options)
}


/***
wmSaveModel -d data/vijver2002.tab -i data/vijver2002.nominal.tab -o results/nominal -T -R results/nominal_none-1.0.summary.tab 

real	0m8.498s

1000 null model points (4 iterations)		real	0m14.095s		568,270

*/
