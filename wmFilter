#!/usr/bin/env groovy

import durbin.weka.* 
import durbin.util.*

import weka.classifiers.meta.FilteredClassifier;
import weka.filters.unsupervised.attribute.RemoveType;
import weka.core.SerializationHelper;
import weka.filters.supervised.attribute.*
import weka.filters.*
import weka.attributeSelection.*

WekaAdditions.enable() // Enable meta-class additions to weka API

err = System.err // sugar

// Get the command line options, print help if needed. 
options = ParseOptions(args)
err.println ""

// Read the data (expression, CNV, whatever) and the clinical from tab delimited files
data = WekaMine.readNumericFromTable(options.data)

def clinical
if (options.clinical){
	clinical = WekaMine.readFromTable(options.clinical)
}

err.println "=================================="

try{
		
	// Combines data and single class attribute from clinical into one set of instances...
	// Unsupervised filters don't need clinical data. 
	if (options.clinical){						
		instances = WekaMine.createInstancesFromDataAndClinical(data,clinical,options.classAttribute)	
		
		// Clean up instances:
		// * remove useless attributes
		// * if not allowed, remove instances with negative class values
		// * remove instances with missing class values	
		instances = WekaMine.cleanUpInstances(instances)
		
		// Discretize the class attribute...
		if (options.discretization){
			instances = WekaMine.discretizeClassAttribute(instances,options.discretization,options.classAttribute)				
		}
		
	}else {
		instances = data
		data.setClassIndex(-1)
	}

	// Remove ID attribute, since attribute evaluators and classifiers choke on it...
	def instNames = instances.attributeValues("ID")
	noIDinstances = WekaMine.removeInstanceID(instances)
		
	// Apply the attribute selection algorithm to instances...			
	noIDinstances = WekaMine.applyUnsupervisedFilterFromName(noIDinstances,options.filter)
		
	// Put the ID back into the attribute selected instances...
	// KJD: Note that addID below assumes same number of instances in same order. 
	// KJD: This assumption may not always hold for filters... need to think of how to handle this.
	instances = WekaMine.addID(noIDinstances,instNames)			
											
	// Write out the attribute selected tab file...
	WekaMine.saveDataFromInstances(options.outputFile,instances)
			
}catch (Exception e){
	err.println e
}



//============================================================================
// 

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''
	wmFilter takes a tab delimited data file in attributes (rows) x samples (cols) format and 
	applies a filter to it, outputting the filtered data.  There are a wide range of filters, both 
	supervised and unsupervised, from simple normalization to principal components analysis. Consult
	weka documentation for full list. 
	
	
	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:
	
	wmFilter -d data/vijver2002.tab -o data/vijver2002.normalizedunsup.tab -E 'weka.filters.unsupervised.attribute.Normalize'	
	wmFilter -d data/vijver2002.tab -o data/vijver2002.normalizedunsup.tab -E 'durbin.weka.ExponentialNormalizationFilter'	

	''');

	parser.with{

	  required 'o','outputFile',[description: 'File name for where output.']
	  required 'd','data', [description: 'Data file in attribute (row) by samples (col) format.']

	  optional 'i','clinical', [description: 'Clinical file in attribute (row) by samples (col) format. Required for supervised filters, optional for unsupervised.']

		optional 'E','filter',[description: 'Specification of a single filter.']
		optional 'D','discretization',[description: 'Discretization to use for supervised filters.']
		optional 'C','classAttribute',[description: 'Name of class attribute.  Required for supervised filters.']
		
	  flag 'h','help',[default:false,description: 'Print script help.']
	}

	def options
	try{
	  options = parser.parse(args)
	
	}catch(Exception e){
	  System.err << parser.usage
	  System.exit(1)
	}	
	
	return(options)
}
